name: Translate README → Spanish

on:
  push:
    paths:
      - README.md
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  translate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Translate README to Spanish
        env:
          # Optional: provide your own LibreTranslate instance/key for reliability.
          # Add in repo Settings → Secrets and variables → Actions → New repository secret
          LT_ENDPOINT: ${{ secrets.LIBRETRANSLATE_ENDPOINT }} # e.g., https://libretranslate.yourdomain.com/translate
          LT_API_KEY: ${{ secrets.LIBRETRANSLATE_API_KEY }}
        run: |
          python - <<'PY'
          import os, json, textwrap, sys, pathlib, time
          import urllib.request

          SRC_FILE = "README.md"
          OUT_FILE = "README.es.md"

          if not pathlib.Path(SRC_FILE).exists():
            print(f"{SRC_FILE} not found", file=sys.stderr)
            sys.exit(1)

          text = pathlib.Path(SRC_FILE).read_text(encoding="utf-8")

          endpoint = os.environ.get("LT_ENDPOINT") or "https://libretranslate.com/translate"
          api_key  = os.environ.get("LT_API_KEY")  or None

          # Simple chunker to avoid payload limits (aim for ~3500 chars per request)
          def chunk(s, n=3500):
            buf, size = [], 0
            for line in s.splitlines(keepends=True):
              if size + len(line) > n and buf:
                yield "".join(buf)
                buf, size = [line], len(line)
              else:
                buf.append(line); size += len(line)
            if buf:
              yield "".join(buf)

          translated_parts = []
          for part in chunk(text):
            data = {
              "q": part,
              "source": "auto",     # detect input language
              "target": "es",       # Spanish
              "format": "text",     # works well for Markdown; links/code preserved
            }
            if api_key:
              data["api_key"] = api_key

            req = urllib.request.Request(
              endpoint,
              data=json.dumps(data).encode("utf-8"),
              headers={"Content-Type": "application/json"}
            )
            with urllib.request.urlopen(req, timeout=60) as r:
              resp = json.loads(r.read().decode("utf-8"))
            translated_parts.append(resp["translatedText"])
            time.sleep(0.8)  # be gentle with public endpoints

          banner = textwrap.dedent("""\
          <!--
          ⚠️ Auto-generated.
          This file (README.es.md) is produced by a GitHub Action from README.md.
          Edits here may be overwritten.
          -->
          """)
          out = banner + "".join(translated_parts)
          pathlib.Path(OUT_FILE).write_text(out, encoding="utf-8")
          print(f"Wrote {OUT_FILE}")
          PY

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: update README.es.md (auto-translate)"
          branch: ci/translate-readme
          title: "Auto-translate README → Spanish"
          body: |
            This PR updates **README.es.md** from **README.md** using LibreTranslate.
            - Source: README.md
            - Target: README.es.md
            - Provider: ${{ env.LT_ENDPOINT || 'https://libretranslate.com/translate' }}
          add-paths: |
            README.es.md


      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
